{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","content","link","title","hasQuote","getQuote","axios","get","concat","Date","getTime","then","response","_response$data$","data","_this","setState","catch","err","console","log","shareOnTwitter","url","text","window","open","encodeURIComponent","this","str","toString","str_title","react_default","a","createElement","className","lib","replace","src","id","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAiFeA,6MA3EbC,MAAQ,CACNC,QAAS,GACTC,KAAM,GACNC,MAAO,GAEPC,UAAU,KAGZC,SAAW,SAACH,EAAMC,GAChBG,IACGC,IADH,oGAAAC,QAEwG,IAAIC,MAAOC,YAEhHC,KAAK,SAAAC,GAAY,IAAAC,EACiBD,EAASE,KAAK,GAAvCX,EADQU,EACRV,MAAOF,EADCY,EACDZ,QAASC,EADRW,EACQX,KACxBa,EAAKC,SAAS,iBAAO,CACnBb,QACAF,UACAC,OACAE,UAAU,OAGba,MAAM,SAAAC,GACLC,QAAQC,IAAR,GAAAZ,OAAeU,EAAf,wCAEJC,QAAQC,IAAIlB,EAAMC,MAGpBkB,eAAiB,SAACnB,EAAMC,GACtB,IAAMmB,EAAM,CAAEpB,QACRqB,EAAO,CAAEpB,SACfqB,OAAOC,KACL,gCACEC,mBAAmBJ,GACnB,SACAI,mBAAmBH,GACrB,GACA,+JAIK,IACCnB,EAAauB,KAAK3B,MAAlBI,SACAH,EAAY0B,KAAK3B,MAAjBC,QAEAE,GADSwB,KAAK3B,MAAdE,KACUyB,KAAK3B,MAAfG,OACFyB,EAAM3B,EAAQ4B,WACdC,EAAY3B,EAGlB,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACF,IAAb9B,EACC2B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,oBACAH,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMD,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaN,EAAIQ,QAAQ,WAAY,KAAU,IAC7DL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,IAA8BJ,KAE1B,KAGVC,EAAAC,EAAAC,cAAA,OAAKI,IAAI,0BAEXN,EAAAC,EAAAC,cAAA,UAAQK,GAAG,cAAcC,QAASZ,KAAKtB,UAAvC,sBAnEQmC,aCOEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.4fda638e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Card } from \"react-materialize\";\n\nclass App extends Component {\n  state = {\n    content: \"\",\n    link: \"\",\n    title: \"\",\n\n    hasQuote: false\n  };\n\n  getQuote = (link, title) => {\n    axios\n      .get(\n        `https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&timestamp=${new Date().getTime()}`\n      )\n      .then(response => {\n        const { title, content, link } = response.data[0];\n        this.setState(() => ({\n          title,\n          content,\n          link,\n          hasQuote: true\n        }));\n      })\n      .catch(err => {\n        console.log(`${err} whilst contacting the quote API.`);\n      });\n    console.log(link, title);\n  };\n\n  shareOnTwitter = (link, title) => {\n    const url = { link };\n    const text = { title };\n    window.open(\n      \"http://twitter.com/share?url=\" +\n        encodeURIComponent(url) +\n        \"&text=\" +\n        encodeURIComponent(text),\n      \"\",\n      \"left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0\"\n    );\n  };\n\n  render() {\n    const { hasQuote } = this.state;\n    const { content } = this.state;\n    const { link } = this.state;\n    const { title } = this.state;\n    const str = content.toString();\n    const str_title = title;\n    const str_link = link;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {hasQuote === true ? (\n            <div>\n              <h3 className=\"titleQuote\">Your Daily Quote</h3>\n              <Card className=\"cardType\">\n                <div className=\"quoteContainer animated fadeIn\">\n                  <h4 className=\"quoteText\">{str.replace(/<[^>]*>/g, \"\")}</h4>{\" \"}\n                  <p className=\"quote-author\">-{str_title}</p>\n                </div>\n              </Card>{\" \"}\n            </div>\n          ) : (\n            <img src=\"images/EVERYTHING.png\" />\n          )}\n          <button id=\"quoteButton\" onClick={this.getQuote}>\n            New Quote\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}